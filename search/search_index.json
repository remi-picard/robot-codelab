{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Codelab Robot Framework","text":"<p>Bienvenue dans ce codelab d\u00e9di\u00e9 \u00e0 l'apprentissage de Robot Framework !</p>"},{"location":"#quest-ce-que-robot-framework","title":"Qu'est-ce que Robot Framework ?","text":"<p>Robot Framework est un framework de test d'automatisation g\u00e9n\u00e9rique, open source, qui utilise une syntaxe bas\u00e9e sur des mots-cl\u00e9s. Il peut \u00eatre utilis\u00e9 pour l'automatisation des tests et l'automatisation de processus robotiques (RPA).</p>"},{"location":"#objectifs-du-codelab","title":"Objectifs du codelab","text":"<p>\u00c0 la fin de ce codelab, vous serez capable de :</p> <ul> <li>\u2705 Installer et configurer Robot Framework</li> <li>\u2705 Cr\u00e9er vos premiers tests automatis\u00e9s</li> <li>\u2705 Utiliser les biblioth\u00e8ques de base</li> <li>\u2705 Organiser et structurer vos tests</li> <li>\u2705 G\u00e9n\u00e9rer des rapports de test</li> </ul>"},{"location":"#prerequis","title":"Pr\u00e9requis","text":"<p>Avant de commencer, assurez-vous d'avoir :</p> <ul> <li>Python 3.8 ou version sup\u00e9rieure install\u00e9</li> <li>Un \u00e9diteur de texte ou IDE de votre choix (PyCharm ou VSCode)</li> <li>Des connaissances de base en ligne de commande</li> </ul>"},{"location":"#structure-du-codelab","title":"Structure du codelab","text":"<ol> <li>Installation de l'environnement - Configuration de votre environnement de d\u00e9veloppement</li> <li>Installation avec Docker - Utilisation de Robot Framework avec Docker</li> <li>Hello World Robot Framework - Votre premier test simple</li> <li>Configuration des IDEs - Configuration de PyCharm et VSCode</li> <li>Exercice API Booker - Test d'une API REST avec Robot Framework</li> <li>Exercice TODO MVC - Test d'interface utilisateur avec Browser Library</li> <li>Jeu Robot Flower Princess - D\u00e9fi ludique avec APIs et algorithmes</li> </ol> <p>Commen\u00e7ons par l'installation de l'environnement !</p>"},{"location":"api-booker/","title":"Test de l'API Booker","text":"<p>Dans cet exercice pratique, vous allez apprendre \u00e0 tester une API REST avec Robot Framework en utilisant l'API Booker, une API de d\u00e9monstration pour la gestion de r\u00e9servations d'h\u00f4tel.</p>"},{"location":"api-booker/#objectifs","title":"\ud83c\udfaf Objectifs","text":"<p>\u00c0 la fin de cet exercice, vous saurez :</p> <ul> <li>Installer et utiliser la RequestsLibrary</li> <li>Effectuer des requ\u00eates HTTP (GET, POST, PUT, DELETE)</li> <li>G\u00e9rer l'authentification API</li> <li>Valider les r\u00e9ponses JSON</li> <li>Organiser vos tests API</li> </ul>"},{"location":"api-booker/#duree","title":"\ud83d\udd70\ufe0f Dur\u00e9e","text":"<p>1h \u00e0 1h30</p>"},{"location":"api-booker/#documentation-de-lapi","title":"\ud83d\udcda Documentation de l'API","text":"<p>L'API Booker est disponible \u00e0 l'adresse : https://restful-booker.herokuapp.com/</p> <p>Documentation compl\u00e8te : https://restful-booker.herokuapp.com/apidoc/index.html</p>"},{"location":"api-booker/#endpoints-principaux","title":"Endpoints principaux","text":"<ul> <li>GET /booking - Liste toutes les r\u00e9servations</li> <li>POST /booking - Cr\u00e9e une nouvelle r\u00e9servation</li> <li>GET /booking/{id} - R\u00e9cup\u00e8re une r\u00e9servation sp\u00e9cifique</li> <li>PUT /booking/{id} - Met \u00e0 jour une r\u00e9servation (authentification requise)</li> <li>DELETE /booking/{id} - Supprime une r\u00e9servation (authentification requise)</li> <li>POST /auth - G\u00e9n\u00e8re un token d'authentification</li> </ul>"},{"location":"api-booker/#exercices-a-realiser","title":"\ud83d\udccb Exercices \u00e0 r\u00e9aliser","text":""},{"location":"api-booker/#etape-1-installation-de-requestslibrary","title":"\u00c9tape 1 : Installation de RequestsLibrary","text":"<p>Votre premi\u00e8re mission est d'installer la librairie n\u00e9cessaire pour effectuer des requ\u00eates HTTP.</p> <p>\u00c0 faire</p> <p>Installez la librairie RequestsLibrary dans votre environnement virtuel.</p> Afficher les indices <p>Utilisez pip pour installer <code>robotframework-requests</code></p>"},{"location":"api-booker/#etape-2-configuration-de-base","title":"\u00c9tape 2 : Configuration de base","text":"<p>Cr\u00e9ez un fichier <code>booker.robot</code> avec la structure de base.</p> <p>\u00c0 faire</p> <ol> <li>Importez la RequestsLibrary dans la section <code>*** Settings ***</code></li> <li>D\u00e9finissez l'URL de base de l'API comme variable</li> </ol> <p>Structure sugg\u00e9r\u00e9e :</p> <pre><code>*** Settings ***\n# TODO: Importer la librairie n\u00e9cessaire\n\n*** Variables ***\n# TODO: D\u00e9finir l'URL de base de l'API\n\n*** Test Cases ***\n# Vos tests iront ici\n\n*** Keywords ***\n# Vos Keywords personnalis\u00e9s iront ici\n</code></pre>"},{"location":"api-booker/#etape-3-creer-une-reservation","title":"\u00c9tape 3 : Cr\u00e9er une r\u00e9servation","text":"<p>Impl\u00e9mentez un test pour cr\u00e9er une nouvelle r\u00e9servation.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un test case nomm\u00e9 <code>Cr\u00e9er Une Nouvelle R\u00e9servation</code></li> <li>D\u00e9finissez les donn\u00e9es de r\u00e9servation (nom, pr\u00e9nom, prix total, etc.)</li> <li>Effectuez une requ\u00eate POST vers <code>/booking</code></li> <li>V\u00e9rifiez que la r\u00e9ponse a un statut 200</li> <li>V\u00e9rifiez que la r\u00e9ponse contient un <code>bookingid</code></li> <li>Stockez l'ID de r\u00e9servation pour les tests suivants</li> </ol> <p>Donn\u00e9es de test sugg\u00e9r\u00e9es : <pre><code>{\n    \"firstname\": \"John\",\n    \"lastname\": \"Doe\",\n    \"totalprice\": 150,\n    \"depositpaid\": true,\n    \"bookingdates\": {\n        \"checkin\": \"2024-01-01\",\n        \"checkout\": \"2024-01-03\"\n    },\n    \"additionalneeds\": \"Breakfast\"\n}\n</code></pre></p> Afficher les indices <ul> <li>Utilisez le mot-cl\u00e9 <code>POST</code> pour effectuer la requ\u00eate</li> <li>Le param\u00e8tre <code>json</code> permet d'envoyer des donn\u00e9es JSON</li> <li>Le param\u00e8tre <code>verify=${False}</code> permet de bypasser la v\u00e9rification du certificat SSL</li> <li>Utilisez <code>Set Variable</code> pour stocker l'ID de r\u00e9servation</li> </ul>"},{"location":"api-booker/#etape-4-recuperer-la-reservation","title":"\u00c9tape 4 : R\u00e9cup\u00e9rer la r\u00e9servation","text":"<p>Compl\u00e9ter le test pr\u00e9c\u00e9dent pour r\u00e9cup\u00e9rer la r\u00e9servation que vous venez de cr\u00e9er.</p> <p>\u00c0 faire</p> <ol> <li>Renommez le test <code>Cr\u00e9er Une Nouvelle R\u00e9servation</code> en <code>Cr\u00e9er Et R\u00e9cup\u00e9rer Une R\u00e9servation</code></li> <li>Utilisez l'ID de r\u00e9servation stock\u00e9 pr\u00e9c\u00e9demment</li> <li>Effectuez une requ\u00eate GET vers <code>/booking/{id}</code></li> <li>V\u00e9rifiez le statut de la r\u00e9ponse</li> <li>Validez que les donn\u00e9es retourn\u00e9es correspondent \u00e0 celles cr\u00e9\u00e9es</li> </ol> Afficher les indices <ul> <li>Utilisez <code>GET</code> pour la requ\u00eate</li> <li>V\u00e9rifiez les valeurs JSON avec des assertions appropri\u00e9es</li> <li>Pensez \u00e0 g\u00e9rer le cas o\u00f9 l'ID n'existe pas</li> </ul>"},{"location":"api-booker/#etape-5-authentification","title":"\u00c9tape 5 : Authentification","text":"<p>Avant de pouvoir modifier ou supprimer une r\u00e9servation, vous devez vous authentifier.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un keyword <code>Obtenir Token Authentification</code></li> <li>Effectuez une requ\u00eate POST vers <code>/auth</code> avec les credentials</li> <li>R\u00e9cup\u00e9rez le token depuis la r\u00e9ponse</li> <li>Stockez le token pour les requ\u00eates suivantes</li> </ol> <p>Credentials par d\u00e9faut : <pre><code>{\n    \"username\": \"admin\",\n    \"password\": \"password123\"\n}\n</code></pre></p> Afficher les indices <ul> <li>La r\u00e9ponse contient un champ <code>token</code></li> <li>Stockez le token comme variable de test ou de suite</li> <li>Vous utiliserez ce token dans les headers des requ\u00eates suivantes</li> </ul>"},{"location":"api-booker/#etape-6-modifier-la-reservation","title":"\u00c9tape 6 : Modifier la r\u00e9servation","text":"<p>Impl\u00e9mentez un test pour modifier une r\u00e9servation existante.</p> <p>\u00c0 faire</p> <ol> <li>Renommez le test case <code>Cr\u00e9er Et R\u00e9cup\u00e9rer Une R\u00e9servation</code> en <code>Cr\u00e9er R\u00e9cup\u00e9rer Et Modifier Une R\u00e9servation</code></li> <li>Obtenez d'abord un token d'authentification</li> <li>D\u00e9finissez de nouvelles donn\u00e9es de r\u00e9servation</li> <li>Effectuez une requ\u00eate PUT avec le token dans les headers</li> <li>V\u00e9rifiez que la modification a r\u00e9ussi</li> </ol> Afficher les indices <ul> <li>Utilisez le header <code>Cookie: token=VOTRE_TOKEN</code> pour l'authentification</li> <li>Vous pouvez aussi utiliser <code>Authorization: Basic YWRtaW46cGFzc3dvcmQxMjM=</code></li> <li>Modifiez quelques champs comme le prix ou les dates</li> </ul>"},{"location":"api-booker/#etape-7-supprimer-la-reservation","title":"\u00c9tape 7 : Supprimer la r\u00e9servation","text":"<p>Cr\u00e9ez un test pour supprimer la r\u00e9servation.</p> <p>\u00c0 faire</p> <ol> <li>Renommez le test case <code>Cr\u00e9er R\u00e9cup\u00e9rer Et Modifier Une R\u00e9servation</code> en <code>Cr\u00e9er R\u00e9cup\u00e9rer Modifier Et Supprimer Une R\u00e9servation</code></li> <li>Utilisez l'authentification (token ou Basic Auth)</li> <li>Effectuez une requ\u00eate DELETE</li> <li>V\u00e9rifiez que la suppression a r\u00e9ussi (statut 201)</li> <li>Tentez de r\u00e9cup\u00e9rer la r\u00e9servation pour confirmer qu'elle n'existe plus</li> </ol>"},{"location":"api-booker/#structure-suggeree-du-fichier","title":"\ud83d\udd27 Structure sugg\u00e9r\u00e9e du fichier","text":"<pre><code>*** Settings ***\nLibrary     RequestsLibrary\n# TODO: Autres imports si n\u00e9cessaires\n\n*** Variables ***\n${BASE_URL}    # TODO: URL de l'API\n${BOOKING_ID}  # Sera d\u00e9fini dynamiquement\n\n*** Test Cases ***\nTest Complet API Booker\n    [Documentation]    Test complet du cycle de vie d'une r\u00e9servation\n    Cr\u00e9er Une Nouvelle R\u00e9servation\n    R\u00e9cup\u00e9rer La R\u00e9servation\n    Modifier La R\u00e9servation\n    Supprimer La R\u00e9servation\n\n*** Keywords ***\nCr\u00e9er Une Nouvelle R\u00e9servation\n    [Documentation]    Cr\u00e9e une nouvelle r\u00e9servation via POST\n    # TODO: Impl\u00e9menter\n\n# TODO: Autres keywords\n</code></pre>"},{"location":"api-booker/#bonus-optionnel","title":"\ud83c\udf81 Bonus (optionnel)","text":"<p>Si vous terminez rapidement, essayez ces d\u00e9fis suppl\u00e9mentaires :</p>"},{"location":"api-booker/#defi-1-tests-negatifs","title":"D\u00e9fi 1 : Tests n\u00e9gatifs","text":"<ul> <li>Testez la cr\u00e9ation d'une r\u00e9servation avec des donn\u00e9es invalides</li> <li>Testez l'acc\u00e8s \u00e0 une r\u00e9servation qui n'existe pas</li> <li>Testez la modification sans authentification</li> </ul>"},{"location":"api-booker/#defi-2-reutilisabilite","title":"D\u00e9fi 2 : R\u00e9utilisabilit\u00e9","text":"<ul> <li>Cr\u00e9ez des keywords r\u00e9utilisables</li> <li>Externalisez les donn\u00e9es de test dans des variables ou fichiers</li> <li>Impl\u00e9mentez une suite de tests avec setup/teardown</li> </ul>"},{"location":"api-booker/#defi-3-validation-avancee","title":"D\u00e9fi 3 : Validation avanc\u00e9e","text":"<ul> <li>Validez le format des dates</li> <li>V\u00e9rifiez les types de donn\u00e9es retourn\u00e9es</li> <li>Impl\u00e9mentez des assertions personnalis\u00e9es</li> </ul>"},{"location":"api-booker/#conseils-pour-reussir","title":"\ud83d\udca1 Conseils pour r\u00e9ussir","text":"<p>Bonnes pratiques</p> <ul> <li>Testez chaque \u00e9tape individuellement avant de les combiner</li> <li>Utilisez <code>Log</code> et <code>Log To Console</code> pour d\u00e9boguer</li> <li>Consultez la documentation de RequestsLibrary, notamment le Keyword <code>GET</code> o\u00f9 sont document\u00e9s les arguments <code>**kwargs</code></li> <li>V\u00e9rifiez les r\u00e9ponses HTTP avec les status codes appropri\u00e9s</li> </ul> <p>Points d'attention</p> <ul> <li>L'API Booker est parfois lente, ajoutez des timeouts si n\u00e9cessaire</li> <li>Les IDs de r\u00e9servation sont temporaires et peuvent \u00eatre supprim\u00e9s</li> </ul>"},{"location":"api-booker/#ressources-utiles","title":"\ud83d\udcd6 Ressources utiles","text":"<ul> <li>RequestsLibrary</li> <li>BuiltIn</li> <li>Collections</li> </ul>"},{"location":"api-booker/#validation","title":"\ud83c\udfc6 Validation","text":"<p>Votre exercice est r\u00e9ussi si :</p> <ul> <li>\u2705 Tous vos tests passent (statut PASS)</li> <li>\u2705 Vous cr\u00e9ez, lisez, modifiez et supprimez une r\u00e9servation</li> <li>\u2705 L'authentification fonctionne correctement</li> <li>\u2705 Les assertions validant les donn\u00e9es sont pr\u00e9sentes</li> <li>\u2705 Votre code est lisible et bien organis\u00e9</li> </ul> <p>Bon courage ! N'h\u00e9sitez pas \u00e0 exp\u00e9rimenter et \u00e0 consulter la documentation en cas de besoin.</p>"},{"location":"api-booker/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Une fois que vous ma\u00eetrisez les tests d'API, d\u00e9couvrez les tests d'interface utilisateur dans l'exercice TODO MVC !</p>"},{"location":"configuration-ide/","title":"Configuration des IDEs","text":"<p>Pour am\u00e9liorer votre productivit\u00e9 lors du d\u00e9veloppement de tests Robot Framework, il est essentiel de configurer correctement votre environnement de d\u00e9veloppement. Cette section vous guide dans la configuration de PyCharm et VSCode.</p>"},{"location":"configuration-ide/#configuration-de-pycharm","title":"Configuration de PyCharm","text":"<p>PyCharm offre un excellent support pour Robot Framework avec des plugins d\u00e9di\u00e9s.</p> <p>Suivez les \u00e9tapes pr\u00e9sent\u00e9es par Set up your IDE.</p> <p>En r\u00e9sum\u00e9 :</p> <ul> <li>Installer PyCharm Community Edition</li> <li>Installer l'extension <code>Hyper RobotFramework Support</code></li> </ul> <p>Choisir le bon plugin</p> <p>Ne pas installer <code>Robot Framework Language Server</code> qui n'est pas compatible Robot Framework 7+</p> <p>Autre plugin \u00e0 tester</p> <p>Robot Code sortie en 2025</p>"},{"location":"configuration-ide/#fonctionnalites-disponibles-dans-pycharm","title":"Fonctionnalit\u00e9s disponibles dans PyCharm","text":"<ul> <li>\u2705 Coloration syntaxique compl\u00e8te</li> <li>\u2705 Auto-compl\u00e9tion des mots-cl\u00e9s</li> <li>\u2705 Navigation vers les d\u00e9finitions</li> <li>\u2705 Refactoring des mots-cl\u00e9s</li> <li>\u2705 Ex\u00e9cution directe des tests</li> <li>\u2705 D\u00e9bogage des tests</li> </ul>"},{"location":"configuration-ide/#configuration-de-vscode","title":"Configuration de VSCode","text":"<p>VSCode avec les bonnes extensions offre une excellente exp\u00e9rience de d\u00e9veloppement pour Robot Framework.</p> <p>Suivez les \u00e9tapes pr\u00e9sent\u00e9es par Set up your IDE.</p> <p>En r\u00e9sum\u00e9 :</p> <ul> <li>Installer VS Code</li> <li>Installer l'extension Robot Code</li> </ul> <p>Choisir le bon plugin</p> <p>Ne pas installer <code>Robot Framework Language Server</code> qui n'est pas compatible Robot Framework 7+</p> <p>Configurer le Python Path dans les options RobotCode :</p> <p></p>"},{"location":"configuration-ide/#fonctionnalites-disponibles-dans-vscode","title":"Fonctionnalit\u00e9s disponibles dans VSCode","text":"<ul> <li>\u2705 Coloration syntaxique avanc\u00e9e</li> <li>\u2705 Auto-compl\u00e9tion intelligente</li> <li>\u2705 Validation en temps r\u00e9el</li> <li>\u2705 Navigation vers les d\u00e9finitions</li> <li>\u2705 Outline de la structure du fichier</li> <li>\u2705 Ex\u00e9cution directe des tests</li> <li>\u2705 Int\u00e9gration terminal</li> </ul>"},{"location":"configuration-ide/#snippets-utiles-pour-vscode","title":"Snippets utiles pour VSCode","text":"<p>Cr\u00e9ez le fichier <code>.vscode/robotframework.code-snippets</code> :</p> <pre><code>{\n    \"Robot Test Case\": {\n        \"prefix\": \"test\",\n        \"body\": [\n            \"${1:Test Case Name}\",\n            \"    [Documentation]    ${2:Test description}\",\n            \"    ${3:# Test steps here}\",\n            \"    Log    ${4:Test completed}\"\n        ],\n        \"description\": \"Create a new Robot Framework test case\"\n    },\n    \"Robot Keyword\": {\n        \"prefix\": \"keyword\",\n        \"body\": [\n            \"${1:Keyword Name}\",\n            \"    [Documentation]    ${2:Keyword description}\",\n            \"    [Arguments]    ${3:\\\\${arg1}}\",\n            \"    ${4:# Keyword implementation}\",\n            \"    Log    ${5:Keyword executed}\"\n        ],\n        \"description\": \"Create a new Robot Framework keyword\"\n    }\n}\n</code></pre> <p>Pour utiliser ces snippets : actionnez l'IntelliSense (<code>Ctrl+Space</code> ou <code>\u2303Space</code>).</p>"},{"location":"configuration-ide/#conseils-pour-optimiser-votre-workflow","title":"Conseils pour optimiser votre workflow","text":"<p>Raccourcis utiles</p> <p>PyCharm:</p> <ul> <li><code>Ctrl+B</code> : Aller \u00e0 la d\u00e9finition</li> <li><code>Alt+Enter</code> : Actions rapides</li> </ul> <p>VSCode:</p> <ul> <li><code>Ctrl+Shift+P</code> : Palette de commandes</li> <li><code>F12</code> : Aller \u00e0 la d\u00e9finition</li> <li><code>Ctrl+</code> : Terminal int\u00e9gr\u00e9</li> </ul> <p>Formatage automatique</p> <p>Activez le formatage automatique dans votre IDE pour maintenir une syntaxe coh\u00e9rente dans vos fichiers Robot Framework.</p> <p>Attention aux chemins</p> <p>Assurez-vous que les chemins vers votre environnement virtuel Python sont corrects dans la configuration de votre IDE.</p>"},{"location":"configuration-ide/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Maintenant que votre environnement de d\u00e9veloppement est configur\u00e9, vous \u00eates pr\u00eat \u00e0 cr\u00e9er des tests plus complexes et \u00e0 utiliser toutes les fonctionnalit\u00e9s avanc\u00e9es de Robot Framework.</p> <p>Dans la prochaine section, nous allons mettre en pratique vos connaissances avec un exercice complet de test d'API REST.</p>"},{"location":"hello-world/","title":"Hello World Robot Framework","text":"<p>Maintenant que votre environnement est configur\u00e9, cr\u00e9ons votre premier test Robot Framework ! Ce test simple affichera \"Hello World\" dans la console.</p>"},{"location":"hello-world/#etape-1-creation-du-fichier-de-test","title":"\u00c9tape 1 : Cr\u00e9ation du fichier de test","text":"<p>Cr\u00e9ez un nouveau fichier nomm\u00e9 <code>hello_world.robot</code> dans votre r\u00e9pertoire de travail :</p> <pre><code>*** Settings ***\nDocumentation    Mon premier test Robot Framework\n\n*** Test Cases ***\nHello World Test\n    [Documentation]    Test simple qui affiche Hello World\n    Log    Hello World\n    Log To Console    Hello World\n</code></pre>"},{"location":"hello-world/#etape-2-execution-du-test","title":"\u00c9tape 2 : Ex\u00e9cution du test","text":"<p>Ouvrez votre terminal dans le r\u00e9pertoire contenant le fichier <code>hello_world.robot</code> et ex\u00e9cutez la commande suivante :</p> <pre><code># Activer l'env virtuel si besoin\n# source venv/bin/activate\n\nrobot hello_world.robot\n</code></pre>"},{"location":"hello-world/#resultat-attendu","title":"R\u00e9sultat attendu","text":"<p>Apr\u00e8s l'ex\u00e9cution, vous devriez voir :</p> <ol> <li>Dans la console : Le message \"Hello World\" affich\u00e9 directement</li> <li>Dans le rapport : Un fichier <code>report.html</code> sera g\u00e9n\u00e9r\u00e9 avec les d\u00e9tails du test</li> <li>Dans les logs : Un fichier <code>log.html</code> contiendra les logs d\u00e9taill\u00e9s</li> </ol> <p>Exemple de sortie console : <pre><code>==============================================================================\nHello World :: Mon premier test Robot Framework\n==============================================================================\nHello World Test :: Test simple qui affiche Hello World               .Hello World\nHello World Test :: Test simple qui affiche Hello World               | PASS |\n------------------------------------------------------------------------------\nHello World :: Mon premier test Robot Framework                       | PASS |\n1 test, 1 passed, 0 failed\n==============================================================================\nOutput:  /chemin/vers/votre/projet/output.xml\nLog:     /chemin/vers/votre/projet/log.html\nReport:  /chemin/vers/votre/projet/report.html\n</code></pre></p>"},{"location":"hello-world/#explication-du-code","title":"Explication du code","text":"<p>D\u00e9cortiquons le contenu de notre premier test :</p>"},{"location":"hello-world/#section-settings","title":"Section Settings","text":"<p><pre><code>*** Settings ***\nDocumentation    Mon premier test Robot Framework\n</code></pre> - D\u00e9finit la documentation globale du fichier de test</p>"},{"location":"hello-world/#section-test-cases","title":"Section Test Cases","text":"<pre><code>*** Test Cases ***\nHello World Test\n    [Documentation]    Test simple qui affiche Hello World\n    Log    Hello World\n    Log To Console    Hello World\n</code></pre> <ul> <li><code>Hello World Test</code> : Nom de notre cas de test</li> <li><code>[Documentation]</code> : Documentation sp\u00e9cifique \u00e0 ce test</li> <li><code>Log</code> : Mot-cl\u00e9 qui \u00e9crit dans les logs HTML</li> <li><code>Log To Console</code> : Mot-cl\u00e9 qui affiche directement dans la console</li> </ul>"},{"location":"hello-world/#bonnes-pratiques-observees","title":"Bonnes pratiques observ\u00e9es","text":"<p>Conventions de nommage</p> <ul> <li>Les fichiers Robot Framework utilisent l'extension <code>.robot</code></li> <li>Les noms de test sont descriptifs et en anglais de pr\u00e9f\u00e9rence</li> <li>L'indentation utilise au moins 2 espaces OU 1 tabulation</li> </ul> <p>Types de logs</p> <ul> <li><code>Log</code> : Visible uniquement dans le fichier log.html</li> <li><code>Log To Console</code> : Visible dans la console ET dans log.html</li> </ul>"},{"location":"hello-world/#exercice-pratique","title":"Exercice pratique","text":"<p>Modifiez votre test pour afficher votre nom au lieu de \"Hello World\" :</p> <pre><code>*** Test Cases ***\nSaluer Mon Nom\n    [Documentation]    Test qui affiche mon nom\n    Log    Bonjour [Votre Nom] !\n    Log To Console    Bonjour [Votre Nom] !\n</code></pre>"},{"location":"hello-world/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>F\u00e9licitations ! Vous avez cr\u00e9\u00e9 et ex\u00e9cut\u00e9 votre premier test Robot Framework. Dans la prochaine section, nous configurerons votre IDE pour am\u00e9liorer votre productivit\u00e9, puis nous explorerons les mots-cl\u00e9s de base et comment structurer des tests plus complexes.</p> <p>Premier test r\u00e9ussi</p> <p>Vous ma\u00eetrisez maintenant les bases de l'ex\u00e9cution d'un test Robot Framework !</p>"},{"location":"installation-docker/","title":"Installation avec Docker","text":"<p>Docker offre une m\u00e9thode simple et portable pour utiliser Robot Framework sans installer Python directement sur votre syst\u00e8me. Cette approche garantit un environnement coh\u00e9rent sur tous les syst\u00e8mes.</p>"},{"location":"installation-docker/#prerequis","title":"Pr\u00e9requis","text":"<p>Assurez-vous d'avoir Docker install\u00e9 sur votre syst\u00e8me :</p> <ul> <li>Windows/macOS : Docker Desktop</li> <li>Linux : Docker Engine</li> </ul> <p>V\u00e9rifiez l'installation : <pre><code>docker --version\n</code></pre></p>"},{"location":"installation-docker/#methode-1-utilisation-de-limage-populaire","title":"M\u00e9thode 1 : Utilisation de l'image populaire","text":""},{"location":"installation-docker/#telechargement","title":"T\u00e9l\u00e9chargement","text":"<p>L'image <code>marketsquare/robotframework-browser</code>, cit\u00e9e dans la documentation officielle, contient Robot Framework avec quelques librairies pr\u00e9-install\u00e9es.</p> <pre><code># T\u00e9l\u00e9charger l'image\ndocker pull marketsquare/robotframework-browser\n\n# V\u00e9rifier l'installation\ndocker run --rm marketsquare/robotframework-browser robot --version\n\n# Lister les librairies pr\u00e9-install\u00e9es\ndocker run --rm marketsquare/robotframework-browser pip list\n\n# Entrer dans l'image Docker\ndocker run -it --rm -v \"$(pwd)\":/test marketsquare/robotframework-browser bash\n# Ctrl+D pour quitter\n</code></pre>"},{"location":"installation-docker/#execution-dun-test-simple","title":"Ex\u00e9cution d'un test simple","text":"<p>Cr\u00e9er un dossier vide avec le nouveau projet <code>hello-robot-in-docker</code>.</p> <p>Cr\u00e9ez un fichier <code>hello_docker.robot</code> :</p> <pre><code>*** Settings ***\nDocumentation    Test Robot Framework avec Docker\n\n*** Test Cases ***\nHello Docker Test\n    [Documentation]    Test simple avec Docker\n    Log    Hello from Docker!\n    Log To Console    Robot Framework fonctionne dans Docker!\n</code></pre> <p>Ex\u00e9cutez le test avec Docker :</p> <pre><code>docker run --rm -v \"$(pwd)\":/robot -w /robot marketsquare/robotframework-browser robot hello_docker.robot\n</code></pre> <p>Explication de la commande</p> <ul> <li><code>--rm</code> : Supprime le conteneur apr\u00e8s ex\u00e9cution</li> <li><code>-v \"$(pwd)\":/robot</code> : Monte le r\u00e9pertoire courant dans le conteneur</li> <li><code>-w /robot</code> : Pr\u00e9cise le r\u00e9pertoire courant (\"workdir\") dans le conteneur</li> <li>Les fichiers de sortie (par exemple <code>log.html</code>) sont plac\u00e9s dans le r\u00e9pertoire courant (ils sont \u00e9cras\u00e9s \u00e0 chaque lancement)</li> <li><code>marketsquare/robotframework-browser</code> : L'image \u00e0 utiliser</li> <li><code>hello_docker.robot</code> : Chemin relatif du test \u00e0 lancer (\u00e0 partir du workdir)</li> </ul> <p>PermissionError</p> <p>Bien pr\u00e9ciser l'option <code>-w /robot</code> sinon le user dans le conteneur essaye d'\u00e9crire \u00e0 la racine (l\u00e0 o\u00f9 il n'a les droits...) et on a l'erreur  <code>[ ERROR ] Opening output file '/output.xml' failed: PermissionError: [Errno 13] Permission denied: '/output.xml'</code></p> <p>Sans l'option <code>-w</code>, on aurait pu aussi pr\u00e9ciser l'option robot <code>--outputdir</code> : </p> <pre><code>docker run --rm -v \"$(pwd)\":/robot marketsquare/robotframework-browser robot --outputdir /robot /robot/hello_docker.robot\n</code></pre>"},{"location":"installation-docker/#methode-2-creer-votre-propre-image-docker","title":"M\u00e9thode 2 : Cr\u00e9er votre propre image Docker","text":""},{"location":"installation-docker/#dockerfile-personnalise","title":"Dockerfile personnalis\u00e9","text":"<p>Cr\u00e9er un dossier vide avec le nouveau projet <code>hello-robot-in-my-docker</code>.</p> <p>Puis dans ce dossier, initialiser l'environnement virtuel :</p> <p>Cr\u00e9ez un <code>Dockerfile</code> pour votre projet :</p> <pre><code># Utilisez l'image Python officielle\nFROM python:3.13-slim\n\n# D\u00e9finir le r\u00e9pertoire de travail\nWORKDIR /robot\n\n# Copier le fichier des d\u00e9pendances\nCOPY requirements.txt .\n\n# Installer Robot Framework et les d\u00e9pendances\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copier les fichiers de test\nCOPY . .\n\n# D\u00e9finir la commande par d\u00e9faut\nCMD [\"robot\", \"--outputdir\", \"results\", \"tests/\"]\n</code></pre>"},{"location":"installation-docker/#fichier-requirementstxt","title":"Fichier requirements.txt","text":"<pre><code>robotframework==7.3.2\n</code></pre>"},{"location":"installation-docker/#fichier-de-test","title":"Fichier de test","text":"<p>Cr\u00e9ez le r\u00e9pertoire <code>tests</code>.</p> <p>Cr\u00e9ez un fichier <code>tests/hello_docker.robot</code> :</p> <pre><code>*** Settings ***\nDocumentation    Test Robot Framework avec mon image Docker\n\n*** Test Cases ***\nHello Docker Test\n    [Documentation]    Test simple avec Docker\n    Log    Hello from Docker!\n    Log To Console    Robot Framework fonctionne dans mon image Docker!\n</code></pre>"},{"location":"installation-docker/#construction-et-execution","title":"Construction et ex\u00e9cution","text":"<pre><code># Construire l'image\ndocker build -t mon-robot-framework .\n\n# Ex\u00e9cuter les tests\ndocker run --rm -v \"$(pwd)\":/robot mon-robot-framework\n</code></pre> <p>Les fichiers de sortie sont pr\u00e9sents dans le dossier <code>results</code> car l'option <code>--outputdir</code> a \u00e9t\u00e9 sp\u00e9cifi\u00e9e (voir <code>Dockerfile</code>).</p>"},{"location":"installation-docker/#avantages-de-docker-pour-robot-framework","title":"Avantages de Docker pour Robot Framework","text":"<p>Avantages</p> <ul> <li>Portabilit\u00e9 : M\u00eame environnement sur tous les syst\u00e8mes</li> <li>Isolation : Pas de conflit avec les d\u00e9pendances syst\u00e8me</li> <li>Reproductibilit\u00e9 : Tests identiques en d\u00e9veloppement et en environnement de test</li> <li>Facilit\u00e9 de d\u00e9ploiement : Int\u00e9gration simple dans CI/CD</li> <li>Versions multiples : Testez avec diff\u00e9rentes versions facilement</li> </ul> <p>Bonnes pratiques</p> <ul> <li>Montez seulement les r\u00e9pertoires n\u00e9cessaires</li> <li>Utilisez <code>.dockerignore</code> pour exclure les fichiers inutiles</li> <li>D\u00e9finissez des volumes pour persister les r\u00e9sultats</li> </ul>"},{"location":"installation-docker/#depannage","title":"D\u00e9pannage","text":""},{"location":"installation-docker/#problemes-courants","title":"Probl\u00e8mes courants","text":"<p>Probl\u00e8me de montage de volume sur Windows : <pre><code># Utilisez le chemin Windows complet\ndocker run --rm -v \"C:/path/to/tests:/robot\" marketsquare/robotframework-browser robot tests/\n</code></pre></p>"},{"location":"installation-docker/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Maintenant que vous savez utiliser Robot Framework avec Docker, vous pouvez cr\u00e9er des environnements de test reproductibles et les int\u00e9grer facilement dans vos pipelines CI/CD. Dans la prochaine section, nous verrons comment cr\u00e9er votre premier test.</p>"},{"location":"installation/","title":"Installation de l'environnement","text":"<p>Cette premi\u00e8re \u00e9tape vous guide dans l'installation et la configuration de Robot Framework sur votre syst\u00e8me.</p>"},{"location":"installation/#etape-1-creation-de-lenvironnement-virtuel-python","title":"\u00c9tape 1 : Cr\u00e9ation de l'environnement virtuel Python","text":"<p>Il est fortement recommand\u00e9 d'utiliser un environnement virtuel Python pour isoler les d\u00e9pendances de votre projet.</p> <p>Cr\u00e9er un dossier vide avec le nouveau projet <code>hello-robot</code>.</p> <p>Puis dans ce dossier, initialiser l'environnement virtuel :</p> <pre><code>python3 -m venv venv\nsource venv/bin/activate\n</code></pre> <p></p> <p>Note pour Windows</p> <p>Sur Windows, utilisez la commande suivante pour activer l'environnement virtuel : <pre><code>venv\\Scripts\\activate\n</code></pre></p> <p></p> <p>Conseils</p> <p>Vous devriez voir <code>(venv)</code> appara\u00eetre au d\u00e9but de votre ligne de commande, indiquant que l'environnement virtuel est actif.</p> <p>Vous pouvez sortir \u00e0 tout moment de l'environnement virtuel avec la commande <code>deactivate</code>.</p>"},{"location":"installation/#etape-2-installation-de-robot-framework","title":"\u00c9tape 2 : Installation de Robot Framework","text":"<p>Une fois votre environnement virtuel activ\u00e9, installez Robot Framework avec pip :</p> <pre><code>pip install robotframework==7.3.2\n</code></pre> <p>Cette commande installera la derni\u00e8re version stable de Robot Framework ainsi que ses d\u00e9pendances.</p>"},{"location":"installation/#etape-3-test-de-la-ligne-de-commande","title":"\u00c9tape 3 : Test de la ligne de commande","text":"<p>V\u00e9rifiez que l'installation s'est d\u00e9roul\u00e9e correctement en testant la commande <code>robot</code> :</p> <pre><code>robot --help\n</code></pre> <p>Si l'installation est r\u00e9ussie, vous devriez voir l'aide de Robot Framework s'afficher avec toutes les options disponibles.</p>"},{"location":"installation/#verification-de-linstallation","title":"V\u00e9rification de l'installation","text":"<p>Vous pouvez \u00e9galement v\u00e9rifier la version install\u00e9e avec :</p> <pre><code>robot --version\n</code></pre>"},{"location":"installation/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>F\u00e9licitations ! Votre environnement Robot Framework est maintenant pr\u00eat.</p> <p>Alternatives d'installation :</p> <ul> <li>Si vous pr\u00e9f\u00e9rez utiliser Docker, consultez la page Installation avec Docker</li> <li>Sinon, continuez avec la cr\u00e9ation de votre premier test</li> </ul> <p>Installation termin\u00e9e</p> <p>Votre environnement Robot Framework est maintenant configur\u00e9 et pr\u00eat \u00e0 l'emploi !</p>"},{"location":"robot-flower-princess/","title":"\ud83c\udf38 Jeu Robot Flower Princess","text":"<p>Bienvenue dans cet exercice ludique o\u00f9 vous allez programmer un robot pour qu'il livre une fleur \u00e0 une princesse ! Ce d\u00e9fi combine l'apprentissage de Robot Framework avec un jeu de plateau strat\u00e9gique. </p> <p>C'est l'occasion de d\u00e9couvrir la partie Robotic Process Automation (RPA) de Robot Framework. </p>"},{"location":"robot-flower-princess/#objectifs","title":"\ud83c\udfaf Objectifs","text":"<p>\u00c0 la fin de cet exercice, vous saurez :</p> <ul> <li>Utiliser Docker Compose</li> <li>Interagir avec des APIs de jeu en temps r\u00e9el</li> <li>G\u00e9rer l'\u00e9tat d'un jeu tour par tour</li> <li>Impl\u00e9menter un algorithme de pathfinding simple</li> </ul>"},{"location":"robot-flower-princess/#duree","title":"\ud83d\udd70\ufe0f Dur\u00e9e","text":"<p>4h \u00e0 8h</p>"},{"location":"robot-flower-princess/#regles-du-jeu","title":"\ud83c\udfae R\u00e8gles du jeu","text":"<p>Robot Flower Princess est un jeu de plateau strat\u00e9gique pour 1 joueur.</p>"},{"location":"robot-flower-princess/#objectif","title":"Objectif","text":"<p>\ud83e\udd16 Mission : Faire livrer une fleur \u00e0 une princesse par votre robot !</p>"},{"location":"robot-flower-princess/#elements-du-plateau","title":"\u00c9l\u00e9ments du plateau","text":"<ul> <li>\ud83e\udd16 Robot (R) : Votre personnage contr\u00f4l\u00e9</li> <li>\ud83c\udf38 Fleur (F) : \u00c0 r\u00e9cup\u00e9rer et livrer</li> <li>\ud83d\udc78 Princesse (P) : Destination finale</li> <li>\ud83d\uddd1\ufe0f D\u00e9chet (D) : Cases \u00e0 nettoyer</li> <li>\u2b1c Vide (V) : Cases libres</li> </ul>"},{"location":"robot-flower-princess/#actions-possibles","title":"Actions possibles","text":"<ol> <li>Se d\u00e9placer : 1 case dans 4 directions (H/B/G/D)</li> <li>Nettoyer : Transformer une case d\u00e9chet en case libre</li> <li>Porter : Ramasser la fleur</li> <li>D\u00e9poser : Livrer la fleur (uniquement sur la case princesse)</li> </ol>"},{"location":"robot-flower-princess/#contraintes","title":"Contraintes","text":"<ul> <li>\u26a0\ufe0f Le robot ne peut se d\u00e9placer que sur les cases vides</li> <li>\u26a0\ufe0f Le robot ne peut pas nettoyer s'il porte la fleur</li> <li>\u26a0\ufe0f Un mouvement invalide fait perdre la partie</li> <li>\u2705 Victoire quand la fleur est sur la case princesse</li> </ul>"},{"location":"robot-flower-princess/#installation-avec-docker","title":"\ud83d\udc33 Installation avec Docker","text":""},{"location":"robot-flower-princess/#etape-1-fichier-docker-compose","title":"\u00c9tape 1 : Fichier Docker Compose","text":"<p>Cr\u00e9ez un fichier <code>docker-compose.yml</code> pour orchestrer les services :</p> <pre><code>services:\n  backend:\n    image: picardremi/robot-flower-princess:master\n    ports:\n      - \"8000:8000\"\n    networks:\n      - robot-flower-princess-network\n\n  frontend:\n    image: picardremi/robot-flower-princess-ui:latest\n    ports:\n      - \"3000:80\"\n    depends_on:\n      - backend\n    networks:\n      - robot-flower-princess-network\n\nnetworks:\n  robot-flower-princess-network:\n    driver: bridge\n</code></pre>"},{"location":"robot-flower-princess/#etape-2-lancement-des-services","title":"\u00c9tape 2 : Lancement des services","text":"<pre><code># D\u00e9marrer les services\ndocker compose up -d\n</code></pre> <p>En cas de probl\u00e8me :</p> <pre><code># V\u00e9rifier que les services sont en cours d'ex\u00e9cution\ndocker compose ps\n\n# Voir les logs si n\u00e9cessaire\ndocker compose logs -f\n\n# Red\u00e9marrer les services\ndocker compose restart\n\n# Nettoyer et relancer\ndocker compose down &amp;&amp; docker compose up -d\n</code></pre>"},{"location":"robot-flower-princess/#etape-3-verification","title":"\u00c9tape 3 : V\u00e9rification","text":"<p>Une fois les services d\u00e9marr\u00e9s, v\u00e9rifiez l'acc\u00e8s :</p> <ul> <li>\ud83d\udcd6 API Swagger : http://localhost:8000/docs</li> <li>\ud83c\udfae Interface de jeu : http://localhost:3000</li> </ul> <p>Conseil de d\u00e9bogage</p> <p>Utilisez l'interface web pour suivre visuellement l'avancement de votre partie pendant que Robot Framework joue !</p>"},{"location":"robot-flower-princess/#exercices-a-realiser","title":"\ud83d\udccb Exercices \u00e0 r\u00e9aliser","text":""},{"location":"robot-flower-princess/#etape-1-configuration-de-base","title":"\u00c9tape 1 : Configuration de base","text":"<p>Cr\u00e9ez un fichier <code>robot_flower_princess.robot</code> avec la configuration de base.</p> <p>\u00c0 faire</p> <ol> <li>Importez RequestsLibrary</li> <li>D\u00e9finissez l'URL de base de l'API</li> <li>Testez la connexion \u00e0 l'API</li> </ol> <p>Structure sugg\u00e9r\u00e9e : <pre><code>*** Settings ***\n# TODO: Importer RequestsLibrary\n\n*** Variables ***\n${API_BASE_URL}    http://localhost:8000\n\n*** Test Cases ***\n# Vos tests de jeu iront ici\n\n*** Keywords ***\n# Vos strat\u00e9gies de jeu iront ici\n</code></pre></p>"},{"location":"robot-flower-princess/#etape-2-creer-et-explorer-une-partie","title":"\u00c9tape 2 : Cr\u00e9er et explorer une partie","text":"<p>Impl\u00e9mentez les fonctions de base pour interagir avec l'API de jeu.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un keyword pour d\u00e9marrer une nouvelle partie</li> <li>R\u00e9cup\u00e9rez l'ID de la partie cr\u00e9\u00e9e</li> <li>Cr\u00e9ez un keyword pour r\u00e9cup\u00e9rer l'\u00e9tat du plateau</li> <li>Affichez le plateau sous forme lisible</li> </ol> Afficher les indices <ul> <li><code>POST /games</code> retourne un JSON avec l'ID de la partie <code>game_id</code></li> <li><code>GET /games/{game_id}/board</code> retourne le plateau sous forme de cha\u00eene.</li> </ul>"},{"location":"robot-flower-princess/#etape-3-analyser-le-plateau","title":"\u00c9tape 3 : Analyser le plateau","text":"<p>Cr\u00e9ez des fonctions pour comprendre l'\u00e9tat du jeu.</p> <p>\u00c0 faire</p> <ol> <li>Localisez les positions du robot, de la fleur et de la princesse</li> <li>Identifiez les cases vides et les d\u00e9chets</li> <li>Cr\u00e9ez une repr\u00e9sentation interne du plateau</li> <li>Impl\u00e9mentez une fonction pour calculer la distance entre deux points</li> </ol> Afficher les indices <ul> <li>Le plateau est une cha\u00eene avec des retours \u00e0 la ligne. Chaque ligne repr\u00e9sente une rang\u00e9e du plateau.</li> <li>Utilisez <code>Split String</code> pour traiter ligne par ligne</li> <li>Utilisez <code>Split String To Characters</code> pour r\u00e9cup\u00e9rer les caract\u00e8res (pi\u00e8ces) de chaque ligne</li> <li>Stockez les positions comme coordonn\u00e9es (x, y)</li> </ul>"},{"location":"robot-flower-princess/#etape-4-mouvements-de-base","title":"\u00c9tape 4 : Mouvements de base","text":"<p>Impl\u00e9mentez les actions de base du robot.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un keyword pour d\u00e9placer le robot</li> <li>Cr\u00e9ez un keyword pour nettoyer une case</li> <li>Cr\u00e9ez un keyword pour ramasser la fleur</li> <li>Cr\u00e9ez un keyword pour d\u00e9poser la fleur</li> <li>G\u00e9rez les erreurs d'actions invalides</li> </ol> Afficher les indices <ul> <li>TOUTES les actions prennent une direction : Haut/Bas/Gauche/Droite (<code>H</code> / <code>B</code> / <code>G</code> / <code>D</code>)</li> <li>V\u00e9rifiez toujours le statut de la r\u00e9ponse</li> </ul>"},{"location":"robot-flower-princess/#etape-5-navigation-intelligente","title":"\u00c9tape 5 : Navigation intelligente","text":"<p>Impl\u00e9mentez un algorithme pour naviguer vers une destination.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un algorithme de pathfinding simple</li> <li>Naviguez du robot vers la fleur</li> <li>G\u00e9rez les obstacles (d\u00e9chets) en les nettoyant</li> </ol> Afficher les indices <ul> <li>Commencez par un algorithme glouton (se rapprocher \u00e0 chaque \u00e9tape)</li> <li>Si une case d\u00e9chet bloque, nettoyez-la d'abord</li> <li>Utilisez une boucle WHILE pour la navigation continue</li> <li>Arr\u00eatez-vous quand vous atteignez la destination</li> </ul>"},{"location":"robot-flower-princess/#etape-6-strategie-complete","title":"\u00c9tape 6 : Strat\u00e9gie compl\u00e8te","text":"<p>Impl\u00e9mentez une strat\u00e9gie compl\u00e8te pour gagner au jeu.</p> <p>\u00c0 faire</p> <ol> <li>Combinez toutes les fonctions pr\u00e9c\u00e9dentes</li> <li>Naviguez vers la fleur et ramassez-la</li> <li>Naviguez vers la princesse avec la fleur</li> <li>D\u00e9posez la fleur sur la case princesse</li> <li>V\u00e9rifiez la victoire</li> </ol> Afficher les indices <ul> <li>Une partie se joue en deux phases : r\u00e9cup\u00e9rer puis livrer</li> <li>Le robot ne peut pas nettoyer s'il porte la fleur</li> <li>Planifiez le chemin retour avant de r\u00e9cup\u00e9rer la fleur</li> </ul>"},{"location":"robot-flower-princess/#structure-minimale-du-test","title":"\ud83d\udd27 Structure minimale du test","text":"<pre><code>*** Settings ***\nLibrary     RequestsLibrary\nLibrary     String\nLibrary     Collections\n\n*** Variables ***\n${API_BASE_URL}    http://localhost:8000\n${UI_URL}          http://localhost:3000\n\n*** Test Cases ***\nJouer Une Partie Compl\u00e8te\n    [Documentation]    R\u00e9soudre automatiquement une partie du jeu\n    ${game_id}=    D\u00e9marrer Nouvelle Partie\n\n    Log To Console    \ud83c\udfae Partie cr\u00e9\u00e9e ! Suivez sur ${UI_URL}\n    Log To Console    \ud83d\udccb Game ID: ${game_id}\n\n    Afficher Plateau Initial\n    R\u00e9soudre Partie\n    V\u00e9rifier Victoire\n\n*** Keywords ***\nD\u00e9marrer Nouvelle Partie\n    [Documentation]    Cr\u00e9e une nouvelle partie et retourne l'ID\n    # TODO: Impl\u00e9menter\n    [Return]    ${game_id}\n\nAfficher Plateau Initial\n    [Documentation]    Affiche l'\u00e9tat initial du plateau\n    # TODO: Impl\u00e9menter\n\nR\u00e9soudre Partie\n    [Documentation]    Strat\u00e9gie compl\u00e8te pour gagner\n    # Phase 1: Aller chercher la fleur\n    Naviguer Vers Fleur\n    Ramasser Fleur\n\n    # Phase 2: Livrer \u00e0 la princesse\n    Naviguer Vers Princesse\n    Livrer Fleur \u00c0 Princesse\n\nNaviguer Vers Fleur\n    [Documentation]    Navigation intelligente vers la fleur\n    # TODO: Impl\u00e9menter pathfinding\n\nV\u00e9rifier Victoire\n    [Documentation]    V\u00e9rifie si la partie est gagn\u00e9e\n    # TODO: Impl\u00e9menter\n</code></pre>"},{"location":"robot-flower-princess/#defis-bonus","title":"\ud83c\udf81 D\u00e9fis bonus","text":""},{"location":"robot-flower-princess/#defi-1-organisation","title":"D\u00e9fi 1 : Organisation","text":"<ul> <li>Ajouter des ressources</li> <li>Utiliser les dataclasses Python \ud83d\udc0d</li> </ul>"},{"location":"robot-flower-princess/#defi-2-tester","title":"D\u00e9fi 2 : Tester","text":"<ul> <li>Trouver le bug</li> <li>Ecrire un test pour le reproduire</li> </ul>"},{"location":"robot-flower-princess/#defi-3-optimisation","title":"D\u00e9fi 3 : Optimisation","text":"<ul> <li>Minimisez le nombre de mouvements total</li> </ul>"},{"location":"robot-flower-princess/#defi-4-visualisation-avancee","title":"D\u00e9fi 4 : Visualisation avanc\u00e9e","text":"<ul> <li>Enregistrez chaque mouvement avec capture d'\u00e9cran de l'UI avec Playwright</li> </ul>"},{"location":"robot-flower-princess/#api-reference-complete","title":"\ud83d\udcd6 API Reference compl\u00e8te","text":""},{"location":"robot-flower-princess/#endpoints-disponibles","title":"Endpoints disponibles","text":"M\u00e9thode Endpoint Description POST <code>/games</code> Cr\u00e9er une nouvelle partie GET <code>/games/{game_id}/board</code> R\u00e9cup\u00e9rer l'\u00e9tat du plateau POST <code>/games/{game_id}/move</code> D\u00e9placer le robot POST <code>/games/{game_id}/clean</code> Nettoyer une case POST <code>/games/{game_id}/pickup</code> Ramasser la fleur POST <code>/games/{game_id}/drop</code> D\u00e9poser la fleur"},{"location":"robot-flower-princess/#parametres-de-direction","title":"Param\u00e8tres de direction","text":"<ul> <li>H : Haut</li> <li>B : Bas</li> <li>G : Gauche</li> <li>D : Droite</li> </ul>"},{"location":"robot-flower-princess/#codes-de-plateau","title":"Codes de plateau","text":"<ul> <li>R : Robot \ud83e\udd16</li> <li>F : Fleur \ud83c\udf38</li> <li>P : Princesse \ud83d\udc78</li> <li>D : D\u00e9chet \ud83d\uddd1\ufe0f</li> <li>V : Vide \u2b1c</li> </ul>"},{"location":"robot-flower-princess/#validation","title":"\ud83c\udfc6 Validation","text":"<p>Votre exercice est r\u00e9ussi si :</p> <ul> <li>\u2705 Votre robot peut naviguer sur le plateau</li> <li>\u2705 Vous avez affich\u00e9 le plateau de fa\u00e7on claire</li> <li>\u2705 Votre robot r\u00e9cup\u00e8re la fleur automatiquement</li> <li>\u2705 Votre robot livre la fleur \u00e0 la princesse</li> </ul> <p>Amusez-vous bien avec ce d\u00e9fi ! C'est l'occasion de combiner logique algorithmique et ma\u00eetrise de Robot Framework dans un contexte ludique et motivant \ud83c\udfae\ud83e\udd16\ud83c\udf38</p>"},{"location":"todo-mvc/","title":"Test de l'interface TODO MVC","text":"<p>Dans cet exercice pratique, vous allez apprendre \u00e0 automatiser les tests d'interface utilisateur avec Robot Framework en utilisant la Browser Library moderne et l'application TODO MVC React.</p>"},{"location":"todo-mvc/#objectifs","title":"\ud83c\udfaf Objectifs","text":"<p>\u00c0 la fin de cet exercice, vous saurez :</p> <ul> <li>Installer et configurer Browser Library avec Playwright</li> <li>Automatiser des interactions avec une interface web</li> <li>Localiser des \u00e9l\u00e9ments avec diff\u00e9rents s\u00e9lecteurs</li> <li>G\u00e9rer l'\u00e9tat des \u00e9l\u00e9ments (visible, enabled, etc.)</li> <li>Prendre des captures d'\u00e9cran pour le d\u00e9bogage</li> <li>Organiser vos tests UI de mani\u00e8re efficace</li> </ul>"},{"location":"todo-mvc/#duree","title":"\ud83d\udd70\ufe0f Dur\u00e9e","text":"<p>2h \u00e0 3h</p>"},{"location":"todo-mvc/#application-a-tester","title":"\ud83c\udf10 Application \u00e0 tester","text":"<p>Nous utiliserons l'application TODO MVC React disponible \u00e0 l'adresse : https://todomvc.com/examples/react/dist</p> <p>Cette application permet de :</p> <ul> <li>\u2705 Cr\u00e9er des t\u00e2ches</li> <li>\u2705 Marquer des t\u00e2ches comme termin\u00e9es</li> <li>\u2705 Filtrer les t\u00e2ches (All, Active, Completed)</li> <li>\u2705 Supprimer des t\u00e2ches individuelles</li> <li>\u2705 Supprimer toutes les t\u00e2ches termin\u00e9es</li> </ul>"},{"location":"todo-mvc/#exercices-a-realiser","title":"\ud83d\udccb Exercices \u00e0 r\u00e9aliser","text":""},{"location":"todo-mvc/#etape-1-installation-de-browser-library-et-playwright","title":"\u00c9tape 1 : Installation de Browser Library et Playwright","text":"<p>Votre premi\u00e8re mission est d'installer les outils n\u00e9cessaires pour l'automatisation web moderne.</p> <p>\u00c0 faire</p> <ol> <li>Installez Node.js</li> <li>Ajoutez <code>strict-ssl=false</code> dans le fichier <code>~/.npmrc</code> pour bypasser la v\u00e9rification SSL</li> <li>Installez Browser Library dans votre environnement virtuel</li> <li>Installez les navigateurs Playwright</li> </ol> Afficher les indices <ul> <li>Utilisez <code>pip install robotframework-browser==19.7.2</code></li> <li>Ex\u00e9cutez <code>rfbrowser init</code> pour installer le navigateur</li> <li>Ex\u00e9cutez <code>rfbrowser init firefox</code> si chromium est bloqu\u00e9</li> </ul> <p>Note importante</p> <p>L'installation de Playwright peut prendre plusieurs minutes car elle t\u00e9l\u00e9charge les navigateurs.</p> D\u00e9pannage \ud83d\udc33 <p>Si l'installation ne fonctionne pas, il est possible d'utiliser Docker avec un navigateur headless <pre><code>docker run -it --rm --ipc=host -v $(pwd):/test --user pwuser -w /test marketsquare/robotframework-browser:latest robot -P. -t \"Test Headless In Docker\" .\n</code></pre></p> <p>Sur Windows, remplacer <code>$(pwd)</code> par le chemin de votre projet</p> <p><pre><code>Test Headless In Docker\n    New Browser\n    # D\u00e9commenter en cas de probl\u00e8me SSL\n    # New Context    ignoreHTTPSErrors=${True}\n    New Page    https://todomvc.com/examples/react/dist/\n    Take Screenshot\n</code></pre> L'utilisation de capture d'\u00e9cran permet de voir l'avancement du navigateur headless.</p>"},{"location":"todo-mvc/#etape-2-configuration-de-base-et-premier-test","title":"\u00c9tape 2 : Configuration de base et premier test","text":"<p>Cr\u00e9ez un fichier <code>todo_mvc.robot</code> avec la structure de base.</p> <p>\u00c0 faire</p> <ol> <li>Importez la Browser Library dans la section <code>*** Settings ***</code></li> <li>D\u00e9finissez l'URL de l'application comme variable</li> <li>Cr\u00e9ez un test simple pour ouvrir l'application et v\u00e9rifier qu'elle se charge</li> <li>V\u00e9rifiez que le titre de la page contient \"TodoMVC\"</li> </ol> <p>Structure sugg\u00e9r\u00e9e : <pre><code>*** Settings ***\n# TODO: Importer Browser Library\n\n*** Variables ***\n# TODO: D\u00e9finir l'URL de l'application TODO MVC\n\n*** Test Cases ***\n# Vos tests iront ici\n\n*** Keywords ***\n# Vos mots-cl\u00e9s personnalis\u00e9s iront ici\n</code></pre></p> Afficher les indices <ul> <li>Utilisez le Keyword  <code>Open Browser</code> ou <code>Open Browser  browser=firefox</code> pour ouvrir le navigateur</li> <li>Utilisez <code>New Page</code> pour ouvrir une page</li> </ul>"},{"location":"todo-mvc/#etape-3-creer-une-tache","title":"\u00c9tape 3 : Cr\u00e9er une t\u00e2che","text":"<p>Impl\u00e9mentez un test pour ajouter une nouvelle t\u00e2che \u00e0 la liste.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez un test case <code>Cr\u00e9er Une Nouvelle T\u00e2che</code></li> <li>Localisez le champ de saisie des t\u00e2ches</li> <li>Saisissez le texte d'une nouvelle t\u00e2che</li> <li>Appuyez sur Entr\u00e9e pour valider</li> <li>V\u00e9rifiez que la t\u00e2che appara\u00eet dans la liste</li> </ol> Afficher les indices <ul> <li>Le champ de saisie a un placeholder \"What needs to be done?\"</li> <li>Utilisez <code>Fill Text</code> pour saisir le texte</li> <li>Utilisez <code>Keyboard Key</code> avec \"Enter\" pour valider</li> <li>V\u00e9rifiez la pr\u00e9sence de la t\u00e2che avec <code>Get Text</code> ou <code>Get Element</code></li> </ul>"},{"location":"todo-mvc/#etape-4-lister-les-taches","title":"\u00c9tape 4 : Lister les t\u00e2ches","text":"<p>Cr\u00e9ez un test pour v\u00e9rifier que vous pouvez r\u00e9cup\u00e9rer la liste des t\u00e2ches existantes.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez plusieurs t\u00e2ches de test</li> <li>R\u00e9cup\u00e9rez la liste de toutes les t\u00e2ches affich\u00e9es</li> <li>V\u00e9rifiez le nombre de t\u00e2ches cr\u00e9\u00e9es</li> <li>Validez le contenu des t\u00e2ches</li> </ol> Afficher les indices <ul> <li>Les t\u00e2ches sont dans des \u00e9l\u00e9ments <code>&lt;li&gt;</code> avec la classe <code>todo</code></li> <li>Utilisez <code>Get Elements</code> pour r\u00e9cup\u00e9rer plusieurs \u00e9l\u00e9ments</li> <li>Comptez les \u00e9l\u00e9ments avec <code>Get Length</code></li> <li>Parcourez la liste pour v\u00e9rifier le contenu</li> </ul>"},{"location":"todo-mvc/#etape-5-filtrer-les-taches","title":"\u00c9tape 5 : Filtrer les t\u00e2ches","text":"<p>Impl\u00e9mentez un test pour utiliser les filtres de l'application (All, Active, Completed).</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez plusieurs t\u00e2ches de test</li> <li>Marquez certaines t\u00e2ches comme termin\u00e9es</li> <li>Testez le filtre \"Active\" (t\u00e2ches non termin\u00e9es)</li> <li>Testez le filtre \"Completed\" (t\u00e2ches termin\u00e9es)</li> <li>Testez le filtre \"All\" (toutes les t\u00e2ches)</li> <li>V\u00e9rifiez que le bon nombre de t\u00e2ches est affich\u00e9 pour chaque filtre</li> </ol> Afficher les indices <ul> <li>Les filtres sont des liens en bas de l'application</li> <li>Une t\u00e2che est marqu\u00e9e comme termin\u00e9e en cliquant sur le cercle \u00e0 gauche</li> <li>Les t\u00e2ches termin\u00e9es ont la classe CSS <code>completed</code></li> <li>Utilisez <code>Click</code> pour interagir avec les filtres</li> </ul>"},{"location":"todo-mvc/#etape-6-terminer-une-tache","title":"\u00c9tape 6 : Terminer une t\u00e2che","text":"<p>Cr\u00e9ez un test pour marquer une t\u00e2che comme termin\u00e9e et v\u00e9rifier le changement d'\u00e9tat.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez une t\u00e2che de test</li> <li>Cliquez sur le bouton de completion (cercle) de la t\u00e2che</li> <li>V\u00e9rifiez que la t\u00e2che a la classe <code>completed</code></li> <li>V\u00e9rifiez que le texte de la t\u00e2che est barr\u00e9</li> <li>Testez \u00e9galement le \"d\u00e9-marquage\" d'une t\u00e2che termin\u00e9e</li> </ol> Afficher les indices <ul> <li>Le bouton de completion est un <code>input[type=\"checkbox\"]</code></li> <li>Une t\u00e2che termin\u00e9e a un style <code>text-decoration: line-through</code></li> <li>Utilisez des assertions sur les classes CSS ou les styles</li> </ul>"},{"location":"todo-mvc/#etape-7-supprimer-une-tache","title":"\u00c9tape 7 : Supprimer une t\u00e2che","text":"<p>Impl\u00e9mentez un test pour supprimer une t\u00e2che individuelle.</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez une t\u00e2che de test</li> <li>Survolez la t\u00e2che pour r\u00e9v\u00e9ler le bouton de suppression</li> <li>Cliquez sur le bouton de suppression</li> <li>V\u00e9rifiez que la t\u00e2che a disparu de la liste</li> <li>V\u00e9rifiez que le compteur de t\u00e2ches a \u00e9t\u00e9 mis \u00e0 jour</li> </ol> Afficher les indices <ul> <li>Le bouton de suppression n'appara\u00eet qu'au survol (<code>hover</code>)</li> <li>Utilisez <code>Hover</code> pour d\u00e9clencher l'affichage du bouton</li> <li>Le bouton a g\u00e9n\u00e9ralement une classe comme <code>destroy</code></li> <li>V\u00e9rifiez l'absence avec des assertions n\u00e9gatives</li> </ul>"},{"location":"todo-mvc/#etape-8-supprimer-toutes-les-taches-terminees","title":"\u00c9tape 8 : Supprimer toutes les t\u00e2ches termin\u00e9es","text":"<p>Cr\u00e9ez un test pour utiliser la fonction \"Clear completed\".</p> <p>\u00c0 faire</p> <ol> <li>Cr\u00e9ez plusieurs t\u00e2ches de test</li> <li>Marquez certaines t\u00e2ches comme termin\u00e9es</li> <li>Cliquez sur le bouton \"Clear completed\"</li> <li>V\u00e9rifiez que seules les t\u00e2ches termin\u00e9es ont \u00e9t\u00e9 supprim\u00e9es</li> <li>V\u00e9rifiez que les t\u00e2ches actives restent pr\u00e9sentes</li> </ol> Afficher les indices <ul> <li>Le bouton \"Clear completed\" n'appara\u00eet que s'il y a des t\u00e2ches termin\u00e9es</li> <li>Comptez les t\u00e2ches avant et apr\u00e8s l'op\u00e9ration</li> <li>V\u00e9rifiez que les t\u00e2ches restantes sont toutes actives</li> </ul>"},{"location":"todo-mvc/#structure-suggeree-du-fichier","title":"\ud83d\udd27 Structure sugg\u00e9r\u00e9e du fichier","text":"<pre><code>*** Settings ***\nLibrary     Browser\n# TODO: Autres imports si n\u00e9cessaires\n\n*** Variables ***\n${TODO_URL}    https://todomvc.com/examples/react/dist\n${TIMEOUT}     10s\n\n*** Test Cases ***\nTest Complet TODO MVC\n    [Documentation]    Test complet de l'application TODO MVC\n    Setup Navigateur\n    Cr\u00e9er Une Nouvelle T\u00e2che\n    Lister Les T\u00e2ches\n    Filtrer Les T\u00e2ches\n    Terminer Une T\u00e2che\n    Supprimer Une T\u00e2che\n    Supprimer Toutes Les T\u00e2ches Termin\u00e9es\n    [Teardown]    Fermer Navigateur\n\n*** Keywords ***\nSetup Navigateur\n    [Documentation]    Initialise le navigateur et ouvre l'application\n    # TODO: Impl\u00e9menter\n\nCr\u00e9er Une Nouvelle T\u00e2che\n    [Documentation]    Ajoute une nouvelle t\u00e2che \u00e0 la liste\n    # TODO: Impl\u00e9menter\n\nFermer Navigateur\n    [Documentation]    Ferme proprement le navigateur\n    # TODO: Impl\u00e9menter\n\n# TODO: Autres keywords\n</code></pre>"},{"location":"todo-mvc/#bonus-optionnel","title":"\ud83c\udf81 Bonus (optionnel)","text":"<p>Si vous terminez rapidement, essayez ces d\u00e9fis suppl\u00e9mentaires :</p>"},{"location":"todo-mvc/#defi-1-tests-de-validation","title":"D\u00e9fi 1 : Tests de validation","text":"<ul> <li>Testez la cr\u00e9ation de t\u00e2ches vides (doit \u00eatre rejet\u00e9e)</li> <li>Testez la cr\u00e9ation de t\u00e2ches avec des caract\u00e8res sp\u00e9ciaux</li> <li>Testez le comportement avec de tr\u00e8s longues t\u00e2ches</li> </ul>"},{"location":"todo-mvc/#defi-2-edition-inline","title":"D\u00e9fi 2 : Edition inline","text":"<ul> <li>Impl\u00e9mentez l'\u00e9dition d'une t\u00e2che existante (double-clic)</li> <li>Testez l'annulation d'\u00e9dition avec Escape</li> <li>Testez la sauvegarde d'\u00e9dition avec Entr\u00e9e</li> </ul>"},{"location":"todo-mvc/#defi-3-interactions-avancees","title":"D\u00e9fi 3 : Interactions avanc\u00e9es","text":"<ul> <li>Impl\u00e9mentez le \"toggle all\" (marquer/d\u00e9marquer toutes les t\u00e2ches)</li> <li>Testez les raccourcis clavier</li> <li>Ajoutez des assertions sur le compteur de t\u00e2ches</li> </ul>"},{"location":"todo-mvc/#defi-4-multi-navigateurs","title":"D\u00e9fi 4 : Multi-navigateurs","text":"<ul> <li>Ex\u00e9cutez vos tests sur Chrome, Firefox et Safari</li> <li>Comparez les comportements entre navigateurs</li> <li>G\u00e9rez les sp\u00e9cificit\u00e9s de chaque navigateur</li> </ul>"},{"location":"todo-mvc/#conseils-pour-reussir","title":"\ud83d\udca1 Conseils pour r\u00e9ussir","text":"<p>Bonnes pratiques UI</p> <ul> <li>Utilisez des attentes explicites (<code>Wait For Elements State</code>)</li> <li>Prenez des captures d'\u00e9cran aux \u00e9tapes importantes</li> <li>Utilisez des s\u00e9lecteurs robustes (ID &gt; classe &gt; XPath)</li> <li>G\u00e9rez les temps d'attente appropri\u00e9s</li> </ul> <p>Debug et d\u00e9veloppement</p> <pre><code># Capture d'\u00e9cran pour debug\nTake Screenshot    debug_step_${TEST_NAME}.png\n\n# Pause pour inspection manuelle\nPause Execution    Inspectez l'\u00e9tat current\n\n# Log des \u00e9l\u00e9ments trouv\u00e9s\n${elements}=    Get Elements    css=.todo\nLog    Nombre d'\u00e9l\u00e9ments trouv\u00e9s: ${elements.length}\n</code></pre> <p>Points d'attention</p> <ul> <li>L'application TODO MVC peut \u00eatre r\u00e9initialis\u00e9e \u00e0 chaque rechargement</li> <li>Certains \u00e9l\u00e9ments ne sont visibles qu'en cas d'interaction (hover, focus)</li> <li>Les s\u00e9lecteurs CSS peuvent varier selon l'impl\u00e9mentation</li> <li>G\u00e9rez les \u00e9tats transitoires (animations, chargements)</li> </ul>"},{"location":"todo-mvc/#ressources-utiles","title":"\ud83d\udcd6 Ressources utiles","text":"<ul> <li>Browser Library</li> <li>Playwright</li> <li>Guide des s\u00e9lecteurs CSS</li> <li>Exemples / Comparaison</li> </ul>"},{"location":"todo-mvc/#selecteurs-utiles","title":"\ud83d\udee0\ufe0f S\u00e9lecteurs utiles","text":"<p>Voici quelques indices sur les s\u00e9lecteurs que vous pourriez utiliser :</p> <pre><code># Exemples de s\u00e9lecteurs (\u00e0 adapter selon l'impl\u00e9mentation)\n${INPUT_FIELD}           css=.new-todo\n${TODO_LIST}             css=.todo-list\n${TODO_ITEMS}            css=.todo-list li\n${TOGGLE_ALL}            css=.toggle-all\n${FILTERS}               css=.filters a\n${CLEAR_COMPLETED}       css=.clear-completed\n${TODO_COUNT}            css=.todo-count\n</code></pre>"},{"location":"todo-mvc/#validation","title":"\ud83c\udfc6 Validation","text":"<p>Votre exercice est r\u00e9ussi si :</p> <ul> <li>\u2705 Tous vos tests passent dans au moins un navigateur</li> <li>\u2705 Vous pouvez cr\u00e9er, lister, filtrer, terminer et supprimer des t\u00e2ches</li> <li>\u2705 Vos s\u00e9lecteurs sont robustes et ne cassent pas facilement</li> <li>\u2705 Vous g\u00e9rez correctement les attentes et les \u00e9tats des \u00e9l\u00e9ments</li> <li>\u2705 Votre code est organis\u00e9 avec des keywords r\u00e9utilisables</li> <li>\u2705 Vous prenez des captures d'\u00e9cran aux moments appropri\u00e9s</li> </ul>"},{"location":"todo-mvc/#strategies-de-debogage","title":"\ud83d\udd0d Strat\u00e9gies de d\u00e9bogage","text":"<pre><code>*** Keywords ***\nDebug \u00c9tat Application\n    [Documentation]    Helper pour d\u00e9boguer l'\u00e9tat de l'application\n    Take Screenshot    debug_etat_actuel.png\n    ${todos}=    Get Elements    css=.todo-list li\n    Log    Nombre de t\u00e2ches: ${todos.length}\n    FOR    ${todo}    IN    @{todos}\n        ${text}=    Get Text    ${todo}\n        ${classe}=    Get Attribute    ${todo}    class\n        Log    T\u00e2che: \"${text}\" - Classes: ${classe}\n    END\n</code></pre> <p>Bon courage ! N'h\u00e9sitez pas \u00e0 exp\u00e9rimenter avec diff\u00e9rents navigateurs et \u00e0 personnaliser vos tests selon vos besoins.</p>"},{"location":"todo-mvc/#prochaines-etapes","title":"Prochaines \u00e9tapes","text":"<p>Apr\u00e8s avoir ma\u00eetris\u00e9 l'automation d'interface utilisateur, relevez un d\u00e9fi plus ludique avec le Jeu Robot Flower Princess qui combine APIs, algorithmes et strat\u00e9gie !</p>"}]}